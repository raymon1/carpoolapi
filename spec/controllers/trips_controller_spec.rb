require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TripsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Trip. As you add validations to Trip, be sure to
  # adjust the attributes here as well.
  before(:each) do
    g1 = Group.create(name: "raye7")
    p1 = Place.create(name: "Tagamo3", longitude: 12.1, latitude: 0)
    p2 = Place.create(name: "zamalek", longitude: 12.1, latitude: 0)
    u1 = User.create(first_name: "Ash", last_name: "Ketchum", work_place_id: Place.first.id, home_place_id: Place.second.id, group_id: Group.first.id)
    u2 = User.create(first_name: "jon", last_name: "snow", work_place_id: Place.first.id, home_place_id: Place.second.id, group_id: Group.first.id)
  end
  let(:valid_attributes) {
    {driver_id: User.first.id, source_id: Place.first.id, destination_id: Place.second.id, departure_time: DateTime.now + 1.day, seats: 2}
  }

  let(:invalid_attributes) {
    {driver: User.first}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TripsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all trips as @trips" do
      get :index, params: {user_id: User.second.id}, session: valid_session
      expect(response).to have_http_status(200)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Trip" do
        expect {
          post :create, params: {trip: valid_attributes}, session: valid_session
        }.to change(Trip, :count).by(1)
      end

      it "assigns a newly created trip as @trip" do
        post :create, params: {trip: valid_attributes}, session: valid_session
        expect(assigns(:trip)).to be_a(Trip)
        expect(assigns(:trip)).to be_persisted
      end

      it "redirects to the created trip" do
        post :create, params: {trip: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Trip.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved trip as @trip" do
        post :create, params: {trip: invalid_attributes}, session: valid_session
        expect(assigns(:trip)).to be_a_new(Trip)
      end

      it "re-renders the 'new' template" do
        post :create, params: {trip: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end
  describe "DELETE #destroy" do
    it "destroys the requested trip" do
      trip = Trip.create! valid_attributes
      expect {
        delete :destroy, params: {id: trip.to_param, user_id: User.first.id}, session: valid_session
      }.to change(Trip, :count).by(-1)
    end

    it "redirects to the trips list" do
      trip = Trip.create! valid_attributes
      delete :destroy, params: {id: trip.to_param, user_id: User.first.id}, session: valid_session
      expect(response).to redirect_to(trips_url)
    end
  end

end
